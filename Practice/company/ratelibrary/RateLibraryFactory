package com.mine.code.ratelibraries;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang.xwork.StringUtils;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

import com.mine.code.setup.AppConstants;
import com.mine.code.setup.RowType;
import com.mine.code.util.DataBaseSpecification.RatePlanTypes;
import com.mine.code.util.sessionutil.SessionUtils;
/**
 *  <h2>  RateLibraryFactory </h2>
 *  The RateLibraryFactory program implements an applications that
 *   prepare and initialize the rate libraries.  
 *  </br>
 *  <p>
 *         This is class is basically designed for prepare the 4 rate librareis.
 *         Those are <ul>
 *         <li> Primary Rate Plan Library. </li>
 *         <li> Date Feature Rate Plan Library.</li>
 *         <li>  Text Rate Plan Library.</li>
 *         <li>  Rate Plan Library.</li>
 *         </ul>
 *  </p>
 * 
 * @author Sairam Rajulapati.
 * @version 1.4.1
 * @since 2015-July-10.
 */
public class RateLibraryFactory {
							private final static String FILE_TEMPLATE = SessionUtils.getRateLibrariesPath();
							//Example: D:\SAIRAM\myworkspace\SutiWEM\WebRoot\RateLibraries\%s.xml
							private static String FILE = "";
							private static final SAXReader rateLibraryReader = new SAXReader();
							private static RateLibrary PRIMARY_RATE_PLAN_LIBRARY = null;
							private static RateLibrary DATA_FEATURE_RATE_LIBRARY = null;
							private static RateLibrary TEXT_RATE_PLAN_LIBRARY = null;
							private static RateLibrary RATE_PLAN_TYPE = null;
							private static RateLibraryFactory libraryFactory;
	
	/**
	 * Gets the rate libaray factory existed inistance.
	 * This method is designed based on factory method design pattern, though out the life only one inistance is created and
	 *  that inistance only returned. Mean while creating the rate library factory instance creation it will also prepare the 4 rate
	 *  libraries inistances too.
	 *    				
	 * @return RateLibraryFactory  inistance.
	 */
	public synchronized static RateLibraryFactory getInistance() {
							if (libraryFactory == null) {
												 PRIMARY_RATE_PLAN_LIBRARY = prepareRateLibrary(RatePlanTypes.PRIMARY_RATE_PLAN_LIBRARY);
												 DATA_FEATURE_RATE_LIBRARY = prepareRateLibrary(RatePlanTypes.DATA_FEATURE_RATE_LIBRARY);
												 TEXT_RATE_PLAN_LIBRARY = prepareRateLibrary(RatePlanTypes.TEXT_RATE_PLAN_LIBRARY);
												RATE_PLAN_TYPE = prepareRateLibrary(RatePlanTypes.RATE_PLAN_TYPE);
												libraryFactory = new RateLibraryFactory();
							 }
		return libraryFactory;
	}
	/**
	 *  This method is used for create the RatePlanLibrary inistance.
	 *  Here Rate Plan Libraries are created based on RatePlanType.
	 * @param ratePlanType
	 * @return  RateLibrary new inistance.
	 */
	private static RateLibrary prepareRateLibrary(RatePlanTypes ratePlanType) {
		GenerateRateLibrary generateRateLibrary = null;
							try {
										generateRateLibrary = new GenerateRateLibrary(ratePlanType);
							} catch (DocumentException e) {
										e.printStackTrace();
							}
				return generateRateLibrary.prepareRateLibrary();		
	}
	
	/**
	 * Returns the RateLibrary object. 
	 * The ratePlanType argument must specify the absolute  RatePlanTypes.
	 * @param ratePlanType 
	 * @return local existed RateLibrary inistance.
	 */
	public synchronized RateLibrary getRatePlanLibrary(RatePlanTypes ratePlanType){
		switch(ratePlanType){
						case DATA_FEATURE_RATE_LIBRARY : return DATA_FEATURE_RATE_LIBRARY ;
						case PRIMARY_RATE_PLAN_LIBRARY : return PRIMARY_RATE_PLAN_LIBRARY;
						case TEXT_RATE_PLAN_LIBRARY : return TEXT_RATE_PLAN_LIBRARY;
						case RATE_PLAN_TYPE : return RATE_PLAN_TYPE;
						default : return null;
		}
	}
	/**
	 *  <h1> GenerateRateLibrary </h1>
	 *   This GenerateRateLibrary is the core part for preparting the rate libraries.
	 *   <p>
	 *           GenerateRateLibrary is read the rate library xml file, from FILE_TEMPLATE and load 
	 *     it as file parameter, then iterate through the xml file and append the xml file properties
	 *     to the RateLibrarie and return it.
	 *   </p>
	 * @author Sairam Rajulapti.
	 *
	 */
	private static class GenerateRateLibrary implements AppConstants{
		 			RateLibrary library = null;
					Node rateLibrary = null;
					List<Node> columns = null;
					RatePlanTypes ratePlanType = null;
					Node dbFields = null;
					Node validationNode = null;
					
		/**
		 * 	Create a new GenerateRateLibrary object.
		 *   		
		 * @param ratePlanType
		 * @throws DocumentException
		 */
		public GenerateRateLibrary(RatePlanTypes ratePlanType) throws DocumentException {
					FILE = String.format(FILE_TEMPLATE, ratePlanType.getType());
					this.ratePlanType = ratePlanType;
					library = new RateLibrary();
					prepareRateLibraryNode();
					prepareColumnsNode();
					prepareDBFieldsNode();
					prepareValidationNode();
		}
		
		public RateLibrary prepareRateLibrary() {
					prepareLibraryBasicParameters();
					prepareColumnsData();
					prepareDataBaseFields();
					prepareQueries();
					prepareIfValidations();
					prepareOnlyOneColumnAmongColumnsValidation();
					prepareColumnsSumValidation();
					return library;
		}

		private void prepareColumnsSumValidation() {
			if (validationNode != null) {
				List<Node> columnsSumNodes = validationNode.selectNodes(COLUMNS_SUM);
					if (library.getColumnsSum() == null) {
						library.setColumnsSum(new ArrayList<String>());
					}
					if (columnsSumNodes != null) {
						library.getValidations().add(RowType.COLUMNS_SUM);
							for (Node columnSumNode : columnsSumNodes) {
									String value = columnSumNode.valueOf(ATR_COLUMNS);
									value = value.concat(":");
									value = value.concat(columnSumNode.valueOf(ATR_EQUALTO));
									library.getColumnsSum().add(value);
							}
					}
			}
		}

		private void prepareOnlyOneColumnAmongColumnsValidation() {
			if(validationNode != null){
				List<Node> amongColumns = validationNode.selectNodes(ONLY_ONE_COLUMN_AMONG_COLUMNS);
	        	if (amongColumns != null) {
	        		 library.getValidations().add(RowType.AMONG_COLUMNS);
	        		for(Node amongColumn : amongColumns ){
							   String value = amongColumn.valueOf(ATR_COLUMNS);
											value = value.concat(":");
											value = value.concat(amongColumn.valueOf(ATR_EQUALTO));
											value = value.concat(":");
											value = value.concat(amongColumn.valueOf(ATR_CASE_SENSISTIVE));
	        				library.getAmongColumns().add(value);
	        		} // End of for(Node amongColumn : amongColumns )
	        	} // End of if (amongColumns != null)
			}// End of if(validationNode != null)
		}

		private void prepareIfValidations() {
	         		if(validationNode != null){
				        List<Node> ifNodes = validationNode.selectNodes(IF);
				        	if (ifNodes != null) {
				        		 library.getValidations().add(RowType.DEPENDENT);
							      for(Node ifNode : ifNodes){  		
				         			     List<Node> isNodes = ifNode.selectNodes(IS);
							         			for(Node isNode : isNodes){
							         					List<Node> thenNodes = isNode.selectNodes(THEN);
										         				for(Node thenNode : thenNodes){
														         				       String key = "";
														         			           String value = "";
																			         				key = ifNode.valueOf(ATR_COLUMN);
																			         				key = key.concat(":");
																			         				key = key.concat(isNode.valueOf(ATR_EQUALTO));
																			         				key = key.concat(":");
																			         				key = key.concat(isNode.valueOf(ATR_CASE_SENSISTIVE));
																			         				value = value.concat(thenNode.valueOf(ATR_COLUMNS));
																			         				value = value.concat(":");
																			         				value = value.concat(thenNode.valueOf(ATR_EQUALTO));
																			         				value = value.concat(":");
																			         				value = value.concat(thenNode.valueOf(ATR_CASE_SENSISTIVE));
																                      library.getIfValidation().put(key, value);
										         				                  }
							         			      } // for(Node isNode : isNodes)
							               } // End of for(Node ifNode : ifNodes)
	         			        } // if if (ifNode != null) {
	         		} // if(validationNode != null)
		}// End of prepareValidations

		private void prepareQueries() {
					prepareSelectQuery();
					prepareUpdateQuery();
					prpeareInsertionQuery();
					prepareCheckDuplicatesQuery();
		}

	private void prepareCheckDuplicatesQuery() {
				String query = "SELECT %s  FROM " + library.getTableName() + " WHERE (%s) AND %s";
				String comma = ",";
				String columns = "";
				String questionMark = "=? ";
				String _1stCondition = "";
				String _2ndCondition = "";
				String condition = "";
				String and = " AND ";
				String quotes = "`";
			columns = quotes +library.getPrimaryKey() + quotes + comma;
			
			for (String column : library.getCheckFirstDuplicateFields() .values()) {
					columns = columns + quotes + column + quotes + comma;
					_1stCondition = _1stCondition + quotes + column + quotes + questionMark + and;
			 }
					_1stCondition = StringUtils.removeEnd(_1stCondition, and);
					columns = StringUtils.removeEnd(columns, comma);
         
			if (library.getCheckSecondDuplicateFields().size() > 0) {
					_1stCondition = "( " + _1stCondition + " ) or (%s) ";
					for (String column : library.getCheckSecondDuplicateFields().values()) {
						_2ndCondition = _2ndCondition +  quotes + column + quotes + questionMark + and;
				     }
						_2ndCondition = StringUtils.removeEnd(_2ndCondition, and);
						_1stCondition = String.format(_1stCondition, _2ndCondition);
			   }
						condition =  quotes + library.getUserId()+ quotes +"=%s  "+and;
						condition = condition+ quotes +library.getCompanyId()+ quotes +"= %s";
						
			if (StringUtils.isNotEmpty(library.getCarrier())) {
					condition = condition+and+ quotes +library.getCarrier()+ quotes +"=%s "+and;
					condition = condition+ quotes +library.getCustomer()+ quotes +"= %s";
			}
					query = String.format(query, columns, _1stCondition, condition);
					library.setCheckDuplicateQuery(query);
					
		} // End of prepareCheckDuplicatesQuery()

	private void prpeareInsertionQuery() {
			String query = " INSERT INTO  %s  (%s)  VALUES (%s)";
			String columns = "";
			String comma = ",";
			String questionMark = "?" + comma;
			String values = "";
			String quotes = "`";
			for (String column : library.getColumns().values()) {
								columns = columns + quotes + column + quotes + comma;
								values = values + questionMark;
			}
								columns = columns + quotes + library.getUserId() + quotes + comma;
								columns = columns + quotes + library.getCompanyId() + quotes;
								values = values + "%s" + comma;
								values = values + "%s";	
			if (StringUtils.isNotEmpty(library.getCarrier())) {
								columns =   columns + comma + quotes + library.getCarrier() + quotes +comma;
								columns =  columns + quotes + library.getCustomer() + quotes;
								values =   values + comma + "%s" +comma;
								values =   values + "%s";
		        }
			
			query = String.format(query, library.getTableName(), columns,	values);
			library.setInsertQuery(query);				
	}

	private void prepareUpdateQuery() {
		String query = " UPDATE  %s  SET %s WHERE %s=?";
		String columns = "";
		String comma = ",";
		String questionMark = "=?";
		String quotes = "`";
		for (String column : library.getColumns().values()) {
			columns = columns + quotes + column + quotes + questionMark + comma;
		}
		columns = StringUtils.removeEnd(columns, comma);
		query = String.format(query,library.getTableName(),columns,quotes +library.getPrimaryKey()+ quotes);
		library.setUpdateQuery(query);
	}

	private void prepareSelectQuery() {
			String query = "SELECT %s  FROM %s WHERE 0";
			String columns = "";
			String comma = ",";
			String quotes = "`";
			for (String column : library.getColumns().values()) {
				columns = columns + quotes + column + quotes + comma;
			}
			columns = StringUtils.removeEnd(columns, comma);
			query = String.format(query, columns,
                    library.getTableName());
        	library.setSelectQuery(query);
	}

	private void prepareDataBaseFields() {
			library.setUserId(dbFields.selectSingleNode(USERID).valueOf(ATR_COLUMNNAME));
			library.setCompanyId(dbFields.selectSingleNode(COMPANYID).valueOf(ATR_COLUMNNAME));
			library.setCarrier(dbFields.selectSingleNode(CARRIER).valueOf(ATR_COLUMNNAME));
			library.setCustomer(dbFields.selectSingleNode(CUSTOMER).valueOf(ATR_COLUMNNAME));
		}

	private void prepareColumnsData() {
		   int index = 0;
			for (Node column : columns) {
						library.getColumns().put(index, column.valueOf(ATR_NAME));
						library.getColumnAlias().put(index,column.valueOf(ATR_EXCEL_COLUMN_NAME));
						collectUniqueKeys(index, column);
						checkAllowEmptyOrNot(column);
						checkColumnType(column);
						checkColumnHasRemovableCharaters(column);
						checkColumnHasMandatoryData(column);
						index++;
			}
			library.setColumnsCount(index);
		}

	private void checkColumnHasMandatoryData(Node column) {
			Node dataIn = column.selectSingleNode(DATA_IN);
			String columnName = column.valueOf(ATR_NAME);
			if (dataIn != null) {
					if (library.getDataShouldBeIn() == null) {
							library.setDataShouldBeIn(new HashMap<String, List<String>>());
					}
					List<Node> valueNodes = dataIn.selectNodes(VALUE);
					List<String> shouldBe = new LinkedList<String>();
					for (Node value : valueNodes) {
						shouldBe.add(value.getStringValue());
				   }
					library.getDataShouldBeIn().put(columnName, shouldBe);
		  }
	}

	private void checkColumnHasRemovableCharaters(Node column) {
		Node extraData = column.selectSingleNode(EXTRADATA_REMOVE);
		String columnName = column.valueOf(ATR_NAME);
		if(extraData!=null)
		{
			String romveData = extraData.valueOf(ATR_REMOVE_DATA);
			if(library.getSpecialCharaterRemoveFields() == null ){
				library.setSpecialCharaterRemoveFields(new LinkedHashMap<String,String>());
			}
				library.getSpecialCharaterRemoveFields().put(columnName, romveData);
		}
	}

	private void checkColumnType(Node column) {
		String type =  column.valueOf(ATR_TYPE);
		String columnName = column.valueOf(ATR_NAME);
			if(StringUtils.equals(NUMERIC, type))
			{
				if(library.getOnlyNumericFields() == null ){
					library.setOnlyNumericFields(new LinkedList<String>());
				}
				library.getOnlyNumericFields().add(columnName);
			}else if(StringUtils.equals(DECIMAL, type))
			{
				if(library.getOnlyDecimalFields() == null ){
					library.setOnlyDecimalFields(new LinkedList<String>());
				}
				library.getOnlyDecimalFields().add(columnName);
			}else if(StringUtils.equals(DATE, type))
			{
				if(library.getOnlyDateValueFields() == null ){
					library.setOnlyDateValueFields(new LinkedList<String>());
				}
				library.getOnlyDateValueFields().add(columnName);
			}else if(StringUtils.equals(YESORNO, type))
			{
					if (library.getYesOrNotFields() == null) {
						library.setYesOrNotFields(new LinkedList<String>());
					}
						library.getYesOrNotFields().add(columnName);
			}
	}

	private void checkAllowEmptyOrNot(Node column) {
			if(StringUtils.equals(YES, column.valueOf(ATR_EMPTY))){
				if(library.getEmptyFields() == null){
					library.setEmptyFields(new LinkedList<String>());
				}
				library.getEmptyFields().add(column.valueOf(ATR_NAME));
			}
	}

	private void collectUniqueKeys(int index, Node column) {
		String uniqueSet = column.valueOf(ATR_UNIQE_COLUMNS);
			if(StringUtils.isNotEmpty(uniqueSet))
			{
				if (StringUtils.equals(uniqueSet, SET1)) {
					library.getCheckFirstDuplicateFields().put(index, column.valueOf(ATR_NAME));
				} else {
					library.getCheckSecondDuplicateFields().put(index, column.valueOf(ATR_NAME));
				}
			}
	}
/**
 * This method is used to prepare rate library basic parameter from "ratelibrary" node.
 */
	private void prepareLibraryBasicParameters() {
				   library.setTableName(rateLibrary.valueOf(ATR_TABLE));
				   library.setPrimaryKey(rateLibrary.valueOf( ATR_PRIMARYKEY));
				   library.setRatePlanName(ratePlanType.getType());
				   library.setRatePlanTypeId(ratePlanType.getTypeId());
				   library.setRatePlanDescription(ratePlanType.getDescription());
		}
	/**
	 *  This method is used for preparing the "ratelibrary" node
	 *  in xml file. This "ratelibrary" node is used for retrive rate library properties
	 *  like table name, table primary key.
	 * @throws DocumentException , if xml documents contains an errors/issues.
	 */
	   private void prepareRateLibraryNode() throws DocumentException{
		   rateLibrary = rateLibraryReader.read(new File(FILE)).getDocument().getRootElement().selectSingleNode(RATELIBRARY);
	   }
	   /**
	    * This method is used for preparing "columns" node in xml file. This 
	    * "columns" is used for getting all "column" nodes.
	    */
	   private void prepareColumnsNode() {
			columns = rateLibrary.selectSingleNode(COLUMNS).selectNodes(COLUMN);
		}
	   /**
	    * This method is used for preparing "database-columns" node in xml file.
	    * this "database-columns" is used to access/fetch data base column parameter
	    * like : userid,companyId,carrier, customerId. 
	    * These prameter are different from one rate library to other in database table.
	    */
	   private void prepareDBFieldsNode() {
		   dbFields = rateLibrary.selectSingleNode(DATABASE_COLUMNS);
		 	}
	   /**
	    * This method is used for preparing the "validation" node in xml file.
	    * This "validation" is used for getting rate library validation senarious.
	    * if "validation" is not null then rate library has an validations.
	    */
	   private void prepareValidationNode(){
		   validationNode = rateLibrary.selectSingleNode(VALIDATION);
	   }
	}
}

